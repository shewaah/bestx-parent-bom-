/*
 * Copyright 1997-2012 SoftSolutions! srl 
 * All Rights Reserved. 
 * 
 * NOTICE: All information contained herein is, and remains the property of SoftSolutions! srl 
 * The intellectual and technical concepts contained herein are proprietary to SoftSolutions! srl and 
 * may be covered by EU, U.S. and other Foreign Patents, patents in process, and 
 * are protected by trade secret or copyright law. 
 * Dissemination of this information or reproduction of this material is strictly forbidden 
 * unless prior written permission is obtained from SoftSolutions! srl.
 * Any additional licenses, terms and conditions, if any, are defined in file 'LICENSE.txt', 
 * which may be part of this software package.
 */
package it.softsolutions.jsscommon;

import java.io.PrintStream;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**  
 *
 * Purpose: this class is mainly for ...  
 *
 * Project Name : bestxengine-akros 
 * First created by: davide.rossoni 
 * Creation date: 24/ago/2012 
 * 
 **/
public class BXSSLog {
    private static final Logger LOGGER = LoggerFactory.getLogger(BXSSLog.class);

    /**
     * NO level. All the information with this level are allways write to file.
     */
    public static final int LL_NONE = -1;

    /**
     * Error level. Use this level to comunicate all the information that can be considered fatal error on the execution of the program, and
     * are very important to check and correct.
     */
    public static final int LL_FATAL = 0;

    /**
     * Warning level. This is the level for non fatal error, the program can continue the execution but some operation it's not possible to
     * complete.
     */
    public static final int LL_ERROR = 1;

    /**
     * Info level. Inform the user that the normal procedure are executed.
     */
    public static final int LL_INFO = 2;

    /**
     * Debug level. Give more info during the different operation, normally in it it's possible to indicate the processing data step for
     * example.
     */
    public static final int LL_DEBUG = 3;

    /**
     * Dump level. Make a dump of all data processed by the program. Normally it generate many log so it's best using only for a little
     * period.
     */
    public static final int LL_DUMP = 4;

    /**
     * code Debug. This level it's develop level only, normally the user never ask this level. It it there are all information generated by
     * the programmers to understand if some goes wrong.
     */
    public static final int LL_CODE_DEBUG = 5;

    /**
     * code statistics.
     */

    /**
     * description of the log level to use in the header of each line.
     */
    static final String[] MSG_CODE = { "       ", " FATAL ", " ERROR ", " INFO  ", " DEBUG ", " DUMP  ", "CODE-D " };

    static final String[] MSG_CODE_TO_WRITE = { "[       ] ", "[ FATAL ] ", "[ ERROR ] ", "[ INFO  ] ", "[ DEBUG ] ", "[ DUMP  ] ", "[CODE-D ] " };

    /**
     * no circularity.
     */
    public static final int PERIOD_NONE = 0;

    /**
     * HOUR circularity. each hour a new file is generated.
     */
    public static final int PERIOD_HOUR = 5;

    /**
     * day circularity. Every day the system generate a new log file for the first log request. So if a day don't have log any file is
     * generated.
     */
    public static final int PERIOD_DAY = 10;

    /**
     * week circularity. a file it's generated each week.
     */
    public static final int PERIOD_WEEK = 20;

    /**
     * month circularity. every month a new log file is generated.
     */
    public static final int PERIOD_MONTH = 30;

    /**
     * Initialize a log file with default values, set only the file name to use.
     */
    public static void init(String fileName) throws Exception {
    }

    public static void init(String fileName, String logPath, PrintStream echo, String header, String datetimePattern) throws Exception {

    }

    public synchronized static void log(int errLev, String key, String msg) {
        switch (errLev) {
        case LL_NONE:
            // doNothing
            break;
        case LL_FATAL:
        case LL_ERROR:
            LOGGER.error('[' + key + "] " + msg);
            break;
        case LL_INFO:
            LOGGER.info('[' + key + "] " + msg);
            break;
        case LL_DEBUG:
            LOGGER.debug('[' + key + "] " + msg);
            break;
        case LL_CODE_DEBUG:
        case LL_DUMP:
            LOGGER.trace('[' + key + "] " + msg);
            break;
        default:
            // doNothing
            break;
        }
    }

    public synchronized static void log(int errLev, String key, String msg, Throwable t) {
        switch (errLev) {
        case LL_NONE:
            // doNothing
            break;
        case LL_FATAL:
        case LL_ERROR:
            LOGGER.error('[' + key + "] " + msg, t);
            break;
        case LL_INFO:
            LOGGER.info('[' + key + "] " + msg, t);
            break;
        case LL_DEBUG:
            LOGGER.debug('[' + key + "] " + msg, t);
            break;
        case LL_CODE_DEBUG:
        case LL_DUMP:
            LOGGER.trace('[' + key + "] " + msg, t);
            break;
        default:
            // doNothing
            break;
        }
    }

}
