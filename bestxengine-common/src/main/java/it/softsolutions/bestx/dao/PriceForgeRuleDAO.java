/*
* Project Name : bestengine-common 
* First created by: ruggero.rizzo 
* Creation date: 10/mag/2012 
* 
* Copright 1997-2012 SoftSolutions! srl 
* All Rights Reserved. 
* 
* NOTICE: All information contained herein is, and remains the property of SoftSolutions! srl 
* The intellectual and technical concepts contained herein are proprietary to SoftSolutions! srl and 
* may be covered by EU, U.S. and other Foreign Patents, patents in process, and 
* are protected by trade secret or copyright law. 
* Dissemination of this information or reproduction of this material is strictly forbidden 
* unless prior written permission is obtained from SoftSolutions! srl.
* Any additional licenses, terms and conditions, if any, are defined in file 'LICENSE.txt', 
* which may be part of this software package. 
* 
*/
package it.softsolutions.bestx.dao;

import it.softsolutions.bestx.dao.bean.PriceForgeRuleBean;
import it.softsolutions.bestx.model.Instrument;
import it.softsolutions.bestx.model.Order;

import org.springframework.jdbc.core.JdbcTemplate;

/**
 * Purpose : the PriceForgeRuleDAO retrieve from the database rules to apply to the price discovery in 
 * order to put a particular Market Maker in best position
 * @author ruggero.rizzo
 *
 */
public interface PriceForgeRuleDAO {
   
   /**
    * Set the jdbcTemplate used to execute queries 
    * 
    * @param jdbcTemplate the JDBCTemplate to set
    */
   public void setJdbcTemplate(JdbcTemplate jdbcTemplate);
   
   /**
    * Generate a PriceForgeRuleBean for the given instrument and order
    * 
    * @param instrument The instrument to check
    * @param side The side used to check the quantity odf the order
    * @param order Order contains data to populate the rule
    * @return a PriceForgeRuleBean contains the behavior of the price discover
    */
   public PriceForgeRuleBean getRule(Instrument instrument, PriceForgeRuleBean.ProposalSide side, Order order);
   
   /**
    * Return a generic rule without price generated by the getRule method
    * 
    * @return a PriceForgeRuleBean contains the behavior of the price discover
    */
   public PriceForgeRuleBean getDefNoneRule();
   
   /**
    * Return a rule wit the best price generated by the getRule method
    * 
    * @return a PriceForgeRuleBean contains the behavior of the price discover
    */
   public PriceForgeRuleBean getDefBestRule();
   
   /**
    * Return a generic rule that take no action on the price discovery
    * 
    * @return a PriceForgeRuleBean contains the behavior of the price discover
    */
   public PriceForgeRuleBean getCheckProposalRule();
}
